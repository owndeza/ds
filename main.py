from email.mime.image import MIMEImage
import os
import aiosmtplib
import json
import asyncio
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import time
from matplotlib import pyplot as plt
import matplotlib
import telebot
import re
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import logging
import json
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from pyCryptoPayAPI import pyCryptoPayAPI
import json
import time
from datetime import datetime, timedelta
import requests
from requests.exceptions import RequestException



logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', filename='bot_logs.log', filemode='a')

last_links = {}
user_states = {}
subscribers = {} 
crypto = pyCryptoPayAPI(api_token="283898:AAM42CGREiemjNaKr0d6P0em8bARI6RLZqv")
bot = AsyncTeleBot('7611702907:AAGz0JVHWKbVAtQIhgwPxNRQIFnunkKwrV4')
owner_id = 5127026939
admins = [7494399049, 5127026939, 6423574058]
report_theme = None
report_text = None

user_states = {}

async def handle_report_mode(chat_id, user_id, recipient, subject, text):
    global sent_messages, failed_messages
    
async def get_user_state(user_id):
    return user_states.get(user_id, {})

async def set_user_state(user_id, state):
    user_states[user_id] = state

def load_users():
    try:
        with open('users.txt', 'r') as file:
            return [int(line.strip()) for line in file]
    except FileNotFoundError:
        return []

def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open('users.txt', 'w') as file:
            file.write('\n'.join(str(user) for user in users))


@bot.message_handler(commands=['start'])
async def start(message):
    user_id = message.from_user.id
    if message.text == '/start':
        save_user(user_id)
    is_subscribed = False
    curr_time = datetime.now()
    try:
        with open('data.json', 'r') as json_file:
            data = json.load(json_file)
            sub = data['users'][f"{user_id}"]['subscribe']
            sub_date = datetime.strptime(sub, '%Y-%m-%d %H:%M:%S.%f')
            if sub_date > curr_time:
                is_subscribed = True
    except:
        pass

    if is_subscribed:
        user_username = message.from_user.username
        with open('data.json', 'r') as json_file:
            data = json.load(json_file)
            user_id_str = str(user_id)
            data['users'][user_id_str]['username'] = user_username
        with open('data.json', 'w') as json_file:
            json.dump(data, json_file, indent=4)
        mode_send = data['users'][f'{user_id}']['mode']
        photo_path = 'net.jpg'
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        btn_account = telebot.types.InlineKeyboardButton(callback_data='account', text='–ü—Ä–æ—Ñ–∏–ª—åüìã')
        btn_report = telebot.types.InlineKeyboardButton(callback_data='reportt', text='SMPT SNOS‚õîÔ∏è')
        btn_mail = telebot.types.InlineKeyboardButton(callback_data='mail', text='–ü–æ—á—Ç—ãüì©')
        btn_pomoch = telebot.types.InlineKeyboardButton(callback_data='pomoch', text='–ü–æ–º–æ—â—å –≤ —Å–Ω–æ—Å–µ—Ä–µüõ†')
  
        markup.row(btn_account, btn_report)
        markup.row(btn_mail, btn_pomoch)

        with open(photo_path, 'rb') as photo:
            await bot.send_photo(message.chat.id, photo,
                           caption=f'''`üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Goose Snos, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram üíÄ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üëÅÔ∏è –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏—à—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–º! üö®

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üí° –ù—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–º–æ—â—å –≤ —Å–Ω–æ—Å–µ—Ä–µ¬ª üîß, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(load_users())} üíº
`''',
                           reply_markup=markup, parse_mode="Markdown")
    else:
        invoice = crypto.create_invoice(asset='USDT', amount=3)
        pay_url = invoice['pay_url']
        invoice_id = invoice['invoice_id']
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ü–æ–¥–ø–∏—Å–∫—É –∑–∞ (3$)", url=pay_url))
        keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_status_{invoice_id}"))

        photo_path = 'net1.png'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(message.chat.id, photo,
                           caption=f"–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é –≤ GooseSnos! \n–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏  - 3$\n–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É",
                           reply_markup=keyboard),
async def handle_docs_photo(message):
    user_id = message.from_user.id
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(f'{user_id}.txt', 'wb') as new_file:
        new_file.write(downloaded_file)
    out = []
    time.sleep(1)
    with open(f'{user_id}.txt', 'r') as file:
        emails = [line.strip() for line in file if line.strip()]
        for x in emails:
            with open('data.json', 'r') as json_file:
                    data = json.load(json_file)
                    data["users"][f"{user_id}"]["sensers"].append(x)
            with open('data.json', 'w') as json_file:
                json.dump(data, json_file, indent=4)
    bot.reply_to(message, f"‚úÖ –ü–æ—á—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã {len(emails)} —à—Ç!")
    time.sleep(1)
    os.remove(f'{user_id}.txt')
async def handle_add_mail(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_message = message.text
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)

    if str(user_id) in data["users"]:
     if isinstance(data["users"][f"{user_id}"]["sensers"], list):              data["users"][f"{user_id}"]["sensers"].append(user_message)
    bot.send_message(chat_id, f"–ü–æ—á—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_message}")

    with open('data.json', 'w') as json_file:
                    json.dump(data, json_file, indent=4)
                    
    if str(user_id) in data["users"]:
        if isinstance(data["users"][f"{user_id}"]["sensers"], list):              data["users"][f"{user_id}"]["sensers"].append(user_message)
        bot.send_message(chat_id, f"–ü–æ—á—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_message}")

        with open('data.json', 'w') as json_file:
          json.dump(data, json_file, indent=4)
    else:
        bot.send_message(chat_id, "üìû–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—á—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")




@bot.callback_query_handler(func=lambda call: call.data == "mail")
async def listmail(call):
    markup = types.InlineKeyboardMarkup()
    btn_list_mail = types.InlineKeyboardButton(callback_data='listmail', text='–ú–æ–∏ –ø–æ—á—Ç—ãüì®')
    btn_clear_mail = types.InlineKeyboardButton(callback_data='clearmail', text='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—á—Ç—ãüöΩ')
    btn_add_mail = types.InlineKeyboardButton(callback_data='setupemail', text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—É‚ûï')
    btn_add_back = types.InlineKeyboardButton(callback_data='back', text='–ù–∞–∑–∞–¥üîô')

    markup.add(btn_add_mail, btn_clear_mail)
    markup.add(btn_list_mail, btn_add_back)

    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, 
                                         message_id=call.message.message_id, 
                                         reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: call.data == 'back')
async def handle_back(call):
    user_id = call.from_user.id
    user_username = call.from_user.username

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
        user_id_str = str(user_id)
        data['users'][user_id_str]['username'] = user_username

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    with open('data.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)

    mode_send = data['users'][user_id_str]['mode']
    photo_path = 'net.jpg'

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    btn_account = telebot.types.InlineKeyboardButton(callback_data='account', text='–ü—Ä–æ—Ñ–∏–ª—åüìã')
    btn_report = telebot.types.InlineKeyboardButton(callback_data='reportt', text='SMPT SNOS‚õîÔ∏è')
    btn_mail = telebot.types.InlineKeyboardButton(callback_data='mail', text='–ü–æ—á—Ç—ãüì©')
    btn_pomoch = telebot.types.InlineKeyboardButton(callback_data='pomoch', text='–ü–æ–º–æ—â—å –≤ —Å–Ω–æ—Å–µ—Ä–µüõ†')

    markup.row(btn_account, btn_report)
    markup.row(btn_mail, btn_pomoch)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(
            call.message.chat.id,
            photo,
            caption=f'''`–ü—Ä–∏–≤–µ—Ç!

–Ø –±–æ—Ç Goose Snos, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ Telegram.‚ò†Ô∏è
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–ï—Å–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π, –∏ —è –ø–æ–º–æ–≥—É —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ —à–∞–≥–∞–º–∏ –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é.üí§
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–¢–∞–∫–∂–µ —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å –≤ —Å–Ω–æ—Å–µ—Ä–µ"
üë®‚Äçüë¶–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: {len(load_users())}
`''',
            reply_markup=markup,
            parse_mode="Markdown"
        )
            

@bot.callback_query_handler(func=lambda call: call.data == 'clearmail')
async def clear_mail(call):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—á—Ç
    await bot.send_message(call.message.chat.id, "–í—Å–µ –ø–æ—á—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")

@bot.callback_query_handler(func=lambda call: call.data == 'listmail')
async def support(call):
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
    user_id = call.from_user.id
    sensors = data["users"].get(f"{user_id}", {}).get("sensers", [])
    mails = "\n".join(sensors[:150])
    count_sensers = len(sensors)

    if count_sensers >= 150:
        await bot.send_message(call.message.chat.id, f"–í–∞—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã: {count_sensers}\n\n<code>–í—ã—à–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ >150</code>", parse_mode='HTML')
    else:
        await bot.send_message(call.message.chat.id, f"–í–∞—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã: {count_sensers}\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 150 —à—Ç.\n\n<code>{mails}</code>", parse_mode='HTML')
    
    await bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ—á—Ç:")

@bot.callback_query_handler(func=lambda call: call.data == 'setupemail')
async def setup_email(call):
    keyboard = types.InlineKeyboardMarkup()
    btn_handle_docs_photo = types.InlineKeyboardButton(callback_data='handle_docs', text='TXT —Ñ–∞–π–ª')
    btn_addmail = types.InlineKeyboardButton(callback_data='addmail', text='–í—Ä—É—á–Ω—É—é')
    btn_back = types.InlineKeyboardButton(callback_data='back', text='–ù–∞–∑–∞–¥')

    keyboard.row(btn_handle_docs_photo, btn_addmail)
    await bot.send_message(call.message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>", parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "handle_docs")
async def handle_docs(call):
    await bot.send_message(call.message.chat.id, "<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ—á—Ç–∞–º–∏\n–ü–æ—á—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å</code>!</b>", parse_mode='HTML')
    user_states[call.from_user.id] = 'waiting_for_docs'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@bot.message_handler(content_types=['document'])
async def handle_docs_photo(message):
    user_id = message.from_user.id

    if user_states.get(user_id) != 'waiting_for_docs':
        return  # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    try:
        MAX_EMAILS = 150
        file_info = await bot.get_file(message.document.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        with open("emails.txt", 'wb') as new_file:
            new_file.write(downloaded_file)

        with open("emails.txt", "r", encoding="utf-8") as f:
            emails = f.readlines()

        if len(emails) > MAX_EMAILS:
            await bot.send_message(message.chat.id, f"<b>–ê–ô –ê–ô –ê–ô –Ω–µ–ª—å–∑—è –∑–∞ —Ä–∞–∑ —Å—Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á—Ç –¥–æ ({MAX_EMAILS}) —É–¥–∞—á–∏ –ø—É–ø—Å–µ–∫ üòò.</b>", parse_mode='HTML')
            return

        for email in emails:
            if ":" not in email:
                await bot.send_message(message.chat.id, "<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—á—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å</code>.</b>", parse_mode='HTML')
                return

        with open('data.json', 'r') as json_file:
            data = json.load(json_file)
        if "users" not in data:
            data["users"] = {}
        if f"{user_id}" not in data["users"]:
            data["users"][f"{user_id}"] = {"sensers": []}
        
        current_count = len(data["users"][f"{user_id}"]["sensers"])
        if current_count + len(emails) > MAX_EMAILS:
            await bot.send_message(message.chat.id, f"<b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—á—Ç ({MAX_EMAILS}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—å—à–µ –ø–æ—á—Ç.</b>", parse_mode='HTML')
            return
        
        data["users"][f"{user_id}"]["sensers"].extend(email.strip() for email in emails)
        with open('data.json', 'w') as outfile:
            json.dump(data, outfile, indent=4)
        
        await bot.send_message(message.chat.id, "<b>–ü–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>", parse_mode='HTML')

    except Exception as e:
        await bot.send_message(message.chat.id, f"<b>–û—à–∏–±–∫–∞: {e}</b>")

@bot.callback_query_handler(func=lambda call: call.data == "addmail")
async def addmail(call):
    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b><code>–ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å</code></b>", parse_mode='HTML')
    user_states[call.from_user.id] = 'waiting_for_add_mail'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'waiting_for_add_mail')
async def handle_add_mail(message):
    user_id = message.from_user.id
    email = message.text

    if ":" not in email:
        await bot.send_message(message.chat.id, "<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—á—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å</code>.</b>", parse_mode='HTML')
        return

    with open('data.json', 'r') as json_file:
        data = json.load(json_file)

    if "users" not in data:
        data["users"] = {}
    if f"{user_id}" not in data["users"]:
        data["users"][f"{user_id}"] = {"sensers": []}

    data["users"][f"{user_id}"]["sensers"].append(email.strip())

    with open('data.json', 'w') as outfile:
        json.dump(data, outfile, indent=4)

    await bot.send_message(message.chat.id, "<b>–ü–æ—á—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>", parse_mode='HTML')



async def get_day_word(day):
    if day % 10 == 1 and day % 100 != 11:
        return "–¥–µ–Ω—å"
    elif day % 10 in [2, 3, 4] and day % 100 not in [12, 13, 14]:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"

@bot.callback_query_handler(func=lambda c: c.data.startswith('check_status'))
async def check_status(callback_query):
    invoice_id = callback_query.data.split('_')[2]
    old_invoice = crypto.get_invoices(invoice_ids=invoice_id)
    status_old_invoice = old_invoice['items'][0]['status']
    user_id = callback_query.from_user.id

    if status_old_invoice == "paid":
        user_username = callback_query.from_user.username
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
        
        with open('data.json', 'r') as json_file:
            data = json.load(json_file)
        
        new_user_data = {
            "sensers": [],
            "mode": 'free',
            "subscribe": "",
            "user_name": user_username
        }
        data['users'][str(user_id)] = new_user_data
        
        with open('data.json', 'w') as json_file:
            json.dump(data, json_file, indent=4)
        
        await update_subscription(user_id, 30)
        await bot.send_message(user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    elif status_old_invoice == "active":
        await bot.send_message(user_id, f"–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç ‚Ññ{invoice_id}!")
    else:
        await bot.send_message(user_id, f"–°—á–µ—Ç ‚Ññ{invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == "info")
async def info(call):
    message_text = "GooseSnos * - `—ç—Ç–æ –±–æ—Ç —Å–Ω–æ—Å–µ—Ä –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏ —Å–≤–æ–∏—Ö –Ω–µ–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª–µ–π.`"
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("–ö–∞–Ω–∞–ª", callback_data='channel'),
        types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'),
        types.InlineKeyboardButton("FAQ ?", callback_data='setup_mode'),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
    )
    await bot.send_message(call.message.chat.id, message_text, reply_markup=keyboard, parse_mode="Markdown")



@bot.callback_query_handler(func=lambda call: call.data == "account")
async def account(call):
    user_id = call.from_user.id
    user_username = call.from_user.username
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
    
    subscribe = data['users'][str(user_id)]['subscribe']
    subscribe_date = datetime.strptime(subscribe, "%Y-%m-%d %H:%M:%S.%f")
    days_left = subscribe_date - datetime.now()

    if subscribe_date > datetime.now():
        mode_send = data['users'][str(user_id)]['mode']
        markup = types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("C–≤–æ–∏ –ø–æ—á—Ç—ã", callback_data='own_mails'),
            types.InlineKeyboardButton("–§—Ä–∏ –ø–æ—á—Ç—ã", callback_data='free_mails')
            
        )
        message = (
            f"üìã–ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"üì±–î–∞–Ω–Ω—ã–µ: `{user_id} | @{user_username}`\n"
            f"üì¨–†–µ–∂–∏–º –ø–æ—á—Ç: {mode_send}\n"
            f"üï∞–¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏: `{str(days_left).split('.')[0]}`\n"
            f"üïï–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: `{str(subscribe).split('.')[0]}`"
        )
        await bot.send_message(call.message.chat.id, message, parse_mode="Markdown", reply_markup=markup)
    else:
        invoice = crypto.create_invoice(asset='USDT', amount=3)
        pay_url = invoice['pay_url']
        invoice_id = invoice['invoice_id']
        keyboard = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ü–æ–¥–ø–∏—Å–∫—É –∑–∞ (3$)", url=pay_url),
            types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_status_{invoice_id}")
        )
        await bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ["own_mails", "free_mails"])
async def set_mail_mode(call):
    user_id_str = str(call.from_user.id)
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)

    data['users'][user_id_str]['mode'] = "own" if call.data == "own_mails" else "free"

    with open('data.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)

    await bot.send_message(call.message.chat.id, f"–†–µ–∂–∏–º –ø–æ—á—Ç—ã –≤—ã–±—Ä–∞–Ω: {'own (–≤–∞—à–∏ –ø–æ—á—Ç—ã)' if call.data == 'own_mails' else 'premuim (–ø–æ—á—Ç—ã –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞)'}", parse_mode='HTML')

async def update_subscription(user_id, days):
    new_expiration_date = datetime.now() + timedelta(days=days)
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
    data['users'][str(user_id)]['subscribe'] = f"{new_expiration_date}"
    with open('data.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)

async def add_subscribes_days(user_id, days):
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
    subscribe_date = datetime.strptime(data['users'][str(user_id)]['subscribe'], "%Y-%m-%d %H:%M:%S.%f")
    new_expiration_date = subscribe_date + timedelta(days=days)
    data['users'][str(user_id)]['subscribe'] = f"{new_expiration_date}"
    with open('data.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)


@bot.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
    user_id = message.from_user.id
    if user_id in admins:
        data = load_users()
        count_users = len(data)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞', callback_data='mailing_adminpanel'))
        keyboard.add(types.InlineKeyboardButton('–í—ã–¥–∞—Ç—å —Å–∞–±–∫—É', callback_data='giving_sub_adminpanel'))
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–æ–¥–ª–∏—Ç—å —Å–∞–±–∫—É', callback_data='extaccess_adminpanel'))
        keyboard.add(types.InlineKeyboardButton('–ó–∞–±—Ä–∞—Ç—å —Å–∞–±–∫—É', callback_data='remove_subscribe'))
        keyboard.add(types.InlineKeyboardButton('–î–æ–±. —Ñ—Ä–∏ –ø–æ—á—Ç—ã', callback_data='add_free_mail'))
        keyboard.add(types.InlineKeyboardButton('–Æ–∑–µ—Ä—ã', callback_data='user_bot_subscribers'))
        
        await bot.send_message(user_id,
                               f"‚òÄÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!</b>\n\n"
                               f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{count_users}</code>\n"
                               f"–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{count_users}</code>\n"
                               f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(admins)}</code>",
                               parse_mode='HTML', reply_markup=keyboard)
    else:
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        
@bot.callback_query_handler(func=lambda call: call.data == "pomoch")
async def support(call):

    support_text = """
    –í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Goose Snos:

    **–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Goose Snos**

    1. **–¶–µ–ª—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã**
       Goose Snos –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –≤ Telegram. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.

    2. **–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è —Å–Ω–æ—Å–∞**
       –ê–∫–∫–∞—É–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:
       - –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∞–º–∞
       - –£–≥—Ä–æ–∑—ã, –∑–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
       - –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Å–∏–ª–∏—è –∏–ª–∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏
       - –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ —Ç.–¥.)
       - –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±–º–∞–Ω

    3. **–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏—è**
       - –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º.
       - –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.

    4. **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**
       –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ. –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    5. **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å**
       –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–∞—Ä—É—à–∞—é—â–∏–µ —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞, –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

    6. **–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª**
       –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.

    **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**

    - **–ß—Ç–æ –∑–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ?**
      –î–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö, –Ω–∞–∂–∏–º–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –¢–∞–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É".

    - **–ó–∞ —á—Ç–æ —á–∞—â–µ —Å–Ω–æ—Å–∏—Ç?**
      –ó–∞ —Å–ø–∞–º, —Ä–µ–∫–ª–∞–º—É, –∂–∏–≤–æ–¥—ë—Ä—Å—Ç–≤–æ, –ø–æ—Ä–Ω–æ, –¥–∏–∞–Ω–æ–Ω –∏ —Å–≤–∞—Ç.

    - **–ö–∞–∫–∏–µ —Å–Ω–æ—Å–∏—Ç –∞–π–¥–∏—à–Ω–∏–∫–∏ –∏–ª–∏ –æ—Ç–ª–µ–≥–∏?**
      –°–Ω–æ—Å–µ—Ä –º–æ–∂–µ—Ç —Å–Ω–µ—Å—Ç–∏ –¥–æ 3 –ª–µ—Ç –æ—Ç–ª–µ–≥–∏ –∏ –∞–π–¥–∏—à–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ 7, 6, 5.

    - **–ö–∞–∫–∏–µ –ø–æ—á—Ç—ã –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–Ω–æ—Å—è—Ç?**
      –õ—É—á—à–µ –≤—Å–µ–≥–æ —Å–Ω–æ—Å—è—Ç gmail, mail.ru, rambler, outlook. –ù–æ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å gmail.

    - **–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ—á—Ç—ã?**
      –î–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º —Ç–≥–∫.
    """

    if call.message.text:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç 
        await bot.edit_message_text(
            chat_id=call.message.chat.id, 
            message_id=call.message.message_id, 
            text=support_text, 
            parse_mode="Markdown"
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
        await bot.send_message(
            chat_id=call.message.chat.id, 
            text=support_text, 
            parse_mode="Markdown"
        )

           
bot.callback_query_handler(func=lambda call: call.data == "user_bot_subscribers")
async def user_bot_subscribers(call):
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
    usernames = [user_data.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω–æ") for user_data in data["users"].values()]
    user_ids = list(data["users"].keys())

    message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:\n\n"
    for user_id, username in zip(user_ids, usernames):
        message += f"<code>{user_id} @{username}</code>\n"
    await bot.send_message(call.message.chat.id, message, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == "add_free_mail")
async def add_free_mail(call):
    await bot.send_message(call.message.chat.id,
                           "–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—É –≤ —Ñ—Ä–∏ –¥–æ—Å—Ç—É–ø</b>\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b><code>–ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å</code></b>",
                           parse_mode='HTML')
    await bot.register_next_step_handler(call.message, add_free_mail_subproc)


async def add_free_mail_subproc(message):
    user_message = message.text
    with open('freesenders.json', 'r') as json_file:
        data = json.load(json_file)
    data["sensers"].append(user_message)
    with open('freesenders.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)
    await bot.send_message(message.from_user.id, f"–ü–æ—á—Ç–∞ {user_message} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!", parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == "remove_subscribe")
async def remove_subscribe(call):
    await bot.send_message(call.message.chat.id,
                           "–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–∑–∞–±—Ä–∞—Ç—å —Å–∞–±–∫—É</b>\n–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏–º–µ—Ä <b><code>5606138180</code></b>",
                           parse_mode='HTML')
    await bot.register_next_step_handler(call.message, remove_subscribe_subproc)


async def remove_subscribe_subproc(message):
    command_parts = message.text.split()
    if len(command_parts) >= 1:
        try:
            user_id_to_demote = int(command_parts[0])
        except (IndexError, ValueError):
            await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ê–π–¥–∏")
            return
        with open('data.json', 'r') as json_file:
            data = json.load(json_file)
        user_id_str = str(user_id_to_demote)
        data['users'][user_id_str]['subscribe'] = f"{datetime.now()}"
        with open('data.json', 'w') as json_file:
            json.dump(data, json_file, indent=4)
        await bot.send_message(user_id_to_demote,
                               f" ‚ùå | –£ –≤–∞—Å –ó–∞–±—Ä–∞–ª–∏ –ü–æ–¥–ø–∏—Å–∫—É!\n–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º, –æ—Ç–ø–∏—à–∏—Ç–µ: @fucking_goose")
        await bot.send_message(message.from_user.id, f"–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å–∞–±–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id_to_demote}!", parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == "extaccess_adminpanel")
async def extaccess_adminpanel(call):
    await bot.send_message(call.message.chat.id,
                           "–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–ø—Ä–æ–¥–ª–µ–Ω–∏–µ</b>\n–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏–º–µ—Ä <b><code>5606138180 1</code></b>",
                           parse_mode='HTML')
    await bot.register_next_step_handler(call.message, extaccess_sub_subproc)


async def extaccess_sub_subproc(message):
    command_parts = message.text.split()
    if len(command_parts) >= 2:
        user_id = int(command_parts[0])
        days = int(command_parts[1])
        try:
            add_subscribes_days(user_id, days)
            await bot.send_message(user_id, f"‚òÄÔ∏è–í–∞–º –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} {get_day_word(int(days))}!")
            await bot.send_message(message.from_user.id, f"–°–∞–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ {user_id} –Ω–∞ {days} {get_day_word(int(days))}!", parse_mode='HTML')
        except:
            await bot.send_message(message.from_user.id, f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Ç–æ–º –ø—Ä–æ–¥–ª–µ–≤–∞–π—Ç–µ", parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == "giving_sub_adminpanel")
async def giving_sub_adminpanel(call):
    await bot.send_message(call.message.chat.id,
                           "–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–≤—ã–¥–∞—á—É —Å–∞–±–∫–∏</b>\n–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∏–º–µ—Ä <b><code>5606138180 1</code></b>",
                           parse_mode='HTML')
    await bot.register_next_step_handler(call.message, giving_sub_subproc)


async def giving_sub_subproc(message):
    command_parts = message.text.split()
    if len(command_parts) >= 2:
        user_id = int(command_parts[0])
        days = int(command_parts[1])
        update_subscription(user_id, days)
        await bot.send_message(user_id, f"‚òÄÔ∏è–í–∞–º –≤—ã–¥–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} {get_day_word(int(days))}!")
        await bot.send_message(message.from_user.id, f"–°–∞–±–∫–∞ –≤—ã–¥–∞–Ω–∞ {user_id} –Ω–∞ {days} {get_day_word(int(days))}!", parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == 'mailing_adminpanel' and call.from_user.id in admins)
async def mailing_callback(call):
    await bot.send_message(call.from_user.id, " | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await bot.register_next_step_handler(call.message, mailing_process)


async def mailing_process(message):
    text = message.text
    users = load_users()
    sent_count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
        except:
            pass
    await bot.send_message(message.from_user.id,
                           f" | <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–ú—ã —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_count}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",
                           parse_mode='HTML')


@bot.message_handler(commands=['extaccess'])
async def grant_subscription(message):
    if message.from_user.id == owner_id:
        try:
            command_parts = message.text.split()
            if len(command_parts) == 3:
                user_id = int(command_parts[1])
                days = int(command_parts[2])

                add_subscribes_days(user_id, days)
                await bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {days} –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ!")
                await bot.send_message(user_id, f"  | –í–∞–º –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –î–Ω–µ–π!")

            else:
                await bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /extaccess user_id days")
        except Exception as e:
            await bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")


@bot.message_handler(commands=['givesub'])
async def grant_subscription(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admins:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    command_parts = message.text.split()
    if len(command_parts) != 3:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ä–æ–≤–Ω–æ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
        await bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /givesub user_id days")
        return

    try:
        user_id = int(command_parts[1])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days = int(command_parts[2])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏)
        with open('data.json', 'r') as json_file:
            data = json.load(json_file)
        
        user_id_str = str(user_id)
        if user_id_str not in data.get('users', {}):
            await bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å await
        await update_subscription(user_id, days)  
        await bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π!")
        await bot.send_message(user_id, f" | –í–∞–º –≤—ã–¥–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π!")

    except ValueError:
        await bot.reply_to(message, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
    except json.JSONDecodeError:
        await bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ data.json. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
    except Exception as e:
        await bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")





@bot.message_handler(commands=['register'])
async def register_user(message: types.Message):
    if message.from_user.id not in admins:
        await bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    command_parts = message.text.split()
    if len(command_parts) != 2:
        await bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register user_id")
        return

    try:
        user_id = int(command_parts[1])  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —á–∏—Å–ª–æ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not os.path.exists('data.json'):
            data = {'users': {}}
        else:
            with open('data.json', 'r') as json_file:
                data = json.load(json_file)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user_data = {
            "sensers": [],
            "mode": "free",
            "subscribe": "",
            "username": message.from_user.username or "example"
        }
        user_id_str = str(user_id)
        data['users'][user_id_str] = new_user_data

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
        with open('data.json', 'w') as json_file:
            json.dump(data, json_file, indent=4)

        await bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_str} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.")
        
        try:
            await bot.send_message(user_id, " | –í–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç!")
        except Exception as e:
            await bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    except ValueError:
        await bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except json.JSONDecodeError:
        await bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ data.json. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
    except Exception as e:
        await bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['demote'])
async def demote_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in admins:
        try:
            command_parts = message.text.split()
            user_id_to_demote = int(command_parts[1])
        except (IndexError, ValueError):
            await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ê–π–¥–∏")
            return
        
        with open('data.json', 'r') as json_file:
            data = json.load(json_file)
        
        user_id_str = str(user_id_to_demote)
        data['users'][user_id_str]['subscribe'] = f"{datetime.now()}"
        
        with open('data.json', 'w') as json_file:
            json.dump(data, json_file, indent=4)
        
        await bot.send_message(message.chat.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ —É {user_id_to_demote} –∑–∞–±—Ä–∞–Ω–∞.")
        await bot.send_message(user_id_to_demote, " ‚ùå | –£ –≤–∞—Å –ó–∞–±—Ä–∞–ª–∏ –ü–æ–¥–ø–∏—Å–∫—É!\n–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º, –æ—Ç–ø–∏—à–∏—Ç–µ: @fucking_goose")
    else:
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")


sent_messages = 0
failed_messages = 0

@bot.callback_query_handler(func=lambda call: call.data == "reportt")
async def report_type_selection(call):
    user_id = call.from_user.id

    with open('data.json', 'r') as json_file:
        data = json.load(json_file)

    subscribe = data['users'][f'{user_id}']['subscribe']
    subscribe_date = datetime.strptime(subscribe, "%Y-%m-%d %H:%M:%S.%f")

    if subscribe_date > datetime.now():
        markup = telebot.types.InlineKeyboardMarkup()
        for i, subject in enumerate(subjects):
            btn_report_type = telebot.types.InlineKeyboardButton(callback_data=f'report_type_{i}', text=subject)
            markup.add(btn_report_type)

        await bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∞–ª–æ–±—ã:", reply_markup=markup, parse_mode='HTML')
    else:
        invoice = crypto.create_invoice(asset='USDT', amount=3)
        pay_url = invoice['pay_url']
        invoice_id = invoice['invoice_id']
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ü–æ–¥–ø–∏—Å–∫—É –∑–∞ (3$)", url=pay_url))
        keyboard.add(telebot.types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_status_{invoice_id}"))
        await bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=keyboard)
        

@bot.callback_query_handler(func=lambda call: call.data.startswith("report_type"))
async def report_type_selected(call):
    user_id = call.from_user.id
    
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
        
    subscribe = data['users'][f'{user_id}']['subscribe']
    subscribe_date = datetime.strptime(subscribe, "%Y-%m-%d %H:%M:%S.%f")
    
    if subscribe_date > datetime.now():
        try:
            report_type_index = int(call.data.split("_")[2])
            report_type = subjects[report_type_index]
            
            await bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∂–∞–ª–æ–±—ã: {report_type}")

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
            logging.info(f"User {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∂–∞–ª–æ–±—ã: {report_type}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ —Å—Å—ã–ª–∫–µ
            if user_id not in user_states or "link_sent" not in user_states[user_id]:
                await bot.send_message(call.message.chat.id,
                                       "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–∞—é—â–∏–π –∫–∞–Ω–∞–ª:\n–ï—Å–ª–∏ –≤—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/\n–¢–æ –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É")
                user_states[user_id] = {"report_type": report_type, "link_sent": True}  
            else:
                user_states[user_id]["report_type"] = report_type 
        
        except (IndexError, ValueError):
            await bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∞–ª–æ–±—ã —Å–Ω–æ–≤–∞.")

    else:
        invoice = crypto.create_invoice(asset='USDT', amount=3)
        pay_url = invoice['pay_url']
        invoice_id = invoice['invoice_id']
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ü–æ–¥–ø–∏—Å–∫—É –∑–∞ (3$)", url=pay_url))
        keyboard.add(telebot.types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_status_{invoice_id}"))
        await bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.from_user.id in user_states)
async def handle_report_link(message):
    sent_messages = 0 
    failed_messages = 0  
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
        sub = data['users'][f"{user_id}"]['subscribe']
        sub_date = datetime.strptime(sub, '%Y-%m-%d %H:%M:%S.%f')
        curr_time = datetime.now()

        if sub_date > curr_time:
            link = message.text
            if link.startswith("https://t.me/"):
                if last_links.get(user_id) == link:
                    return  
                last_links[user_id] = link
                report_type = user_states[user_id]["report_type"]
                

                logging.info(f"User {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: {link} –¥–ª—è —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã: {report_type}")
                print(f"User {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: {link} –¥–ª—è —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã: {report_type}")


                report_texts = {
                    '–°–ü–ê–ú –ò –†–ï–ö–õ–ê–ú–ê': f" –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –°–ü–ê–ú.–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    '–î–û–ö–°–ò–ù–ì': f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –Ω–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —á—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∫–∞—É–Ω—Ç–∞.",
                    '–¢–†–û–õ–ò–ù–ì': f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º. –Ø –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã—Ç–æ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π –∏ —Å–ø–∞–º–∏—Ç –≤ —á–∞—Ç–∞—Ö. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∫–∞—É–Ω—Ç–∞.",
                    '–ü–†–û–î–ê–ñ–ê –ù–ê–†–ö–û–¢–´': f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–µ—Ç –∏ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ—Ç –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                    '–ü–†–û–î–ê–ñ–ê –¶–ü': f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–µ—Ç –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å —É—á–∞—Å—Ç–∏–µ–º –Ω–µ—Å–æ–≤–µ—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                    '–£–ì–ù–ï–¢–ê–ù–ò–ï –†–ê–°–´/–í–ï–†–´': f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π —É–≥–Ω–µ—Ç–∞–µ—Ç –Ω–∞—Ü–∏—é –∏ —Ä–µ–ª–∏–≥–∏—é —Ç–µ–º —Å–∞–º–æ–º —Ä–∞–∑–∂–∏–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–±=—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                    '–†–ê–°–ü–†–û–°–¢–†–ê–ù–Ø–ï–¢ –†–ê–°–ß–õ–ï–ù–ï–ù–ö–£/–ñ–ò–í–û–î–ï–†–ö–£': f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–æ–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ —à–æ–∫–∏—Ä—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É–±–∏–π—Å—Ç–≤–æ–º –ª—é–¥–µ–π –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                    '–ü–û–¢–ê–õ–ö–ò–í–ê–ù–ò–ï –ö –°–ê–ú–û–£–ë–ò–ô–°–¢–í–£': f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –ª—é–¥–µ–π –∫ —Å—É–∏—Ü–∏–¥—É. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.',
                    '–ü–û–¢–ê–õ–ö–ò–í–ê–ù–ò–ï –ö –¢–ï–†–û–†–ò–ó–ú–£': f' –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ —Ç–µ—Ä—Ä—Ä–∏–∑–º—É.–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.',
                    '–£–ì–†–û–ó–´ –°–í–ê–¢–ê': f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–∞–∂–∞–µ–º–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞. –ù–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —è –Ω–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π —É–≥—Ä–æ–∂–∞–µ—Ç –ª—é–¥—è–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–æ–Ω–µ–Ω–∏–µ–º –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - \n{link}. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—É—Ç–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.',
                    '–°–ù–û–° –í–ò–†–¢ –ù–û–ú–ï–†–ê': f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram! –ê–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É–ø–ª–µ–Ω–Ω—ã–π –Ω–∞ —Å–∞–π—Ç–µ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤. –û—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –Ω–æ–º–µ—Ä—É –æ–Ω –Ω–µ –∏–º–µ–µ—Ç, –Ω–æ–º–µ—Ä –Ω–∏–∫–∞–∫ –∫ –Ω–µ–º—É –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - \n{link}. \n–ü—Ä–æ—à—É —Ä–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º. –ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ!',
                    '–°–ù–û–° –ü–†–ï–ú–ö–ò': f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram! –ê–∫–∫–∞—É–Ω—Ç  –ø—Ä–∏–æ–±—Ä—ë–ª –ø—Ä–µ–º–∏—É–º –≤ –≤–∞—à–µ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ —á—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ö–æ–¥–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram. –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ/–Ω–∞—Ä—É—à–µ–Ω–∏—è - \n{link} . \n–ü—Ä–æ—à—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—É—é –∂–∞–ª–æ–±—É –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã!'


                }
                text = report_texts.get(report_type, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∂–∞–ª–æ–±—ã: {link}")

                recipient = ['stopca@telegram.org', 'dmca@telegram.org', 'abuse@telegram.org', 'sticker@telegram.org', 'support@telegram.org']
                subject = report_type

                mode_send = data['users'][str(user_id)]['mode']
                sensers = []
                count_sensers = 0
    
                if mode_send == 'own':
                    sensers = data["users"][str(user_id)]["sensers"]
                    count_sensers = len(sensers)
                    await bot.send_message(chat_id, f"–°—Ç–∞—Ä—Ç!‚úÖ\n–ö–æ–ª-–≤–æ —Å–≤–æ–∏—Ö –ø–æ—á—Ç: {count_sensers}")

                    for email in sensers:
                        for receiver in recipient:
                        
                         if ":" in email:    
                            domain_email, password = email.split(":")
                            try:
                                await send_email(receiver, domain_email, password, subject, text, user_id, chat_id)
                                sent_messages += 1
                                
                            except Exception as e:
                                failed_messages += 1
                                
                    await bot.send_message(chat_id, f"–£—Å–ø–µ—à–Ω–æ –†–µ–ø–æ—Ä—Ç–æ–≤: {sent_messages} —à—Ç. ‚úÖ\n–ù–µ —É—Å–ø–µ—à–Ω–æ: {failed_messages} —Ä–µ–ø–æ—Ä—Ç–æ–≤. ‚ùå")
                    sent_messages = 0
                    failed_messages = 0
                    
                elif mode_send == 'free':
                    with open('freesenders.json', 'r') as js_file:
                        freemail = json.load(js_file)
                        sensers = freemail["sensers"]
                        count_sensers = len(sensers)
                        await bot.send_message(chat_id, f"–°—Ç–∞—Ä—Ç!‚úÖ\n–ö–æ–ª-–≤–æ –ø—Ä–µ–º–∏—É–º –ø–æ—á—Ç –æ—Ç –≥—É—Å—è: {count_sensers}")

                        for email in sensers:
                            for receiver in recipient:
                                
                             if ":" in email:
                                domain_email, password = email.split(":")
                                try:
                                    await send_email(receiver, domain_email, password, subject, text, user_id, chat_id)
                                    sent_messages += 1
                                    
                                except Exception as e:
                                    failed_messages += 1
                                    
                    await bot.send_message(chat_id, f"–£—Å–ø–µ—à–Ω–æ –†–µ–ø–æ—Ä—Ç–æ–≤: {sent_messages} —à—Ç. ‚úÖ\n–ù–µ —É—Å–ø–µ—à–Ω–æ: {failed_messages} —Ä–µ–ø–æ—Ä—Ç–æ–≤. ‚ùå")
                    sent_messages = 0
                    failed_messages = 0

            else:
                await bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/", parse_mode='HTML')
   
            
        else:
            invoice = crypto.create_invoice(asset='USDT', amount=3)
            pay_url = invoice['pay_url']
            invoice_id = invoice['invoice_id']
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É (3$ 30days)", url=pay_url))
            keyboard.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_status_{invoice_id}"))
            await bot.send_message(chat_id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. ‚ùå", reply_markup=keyboard)
            
async def remove_email(user_id, email_to_remove):
    with open('data.json', 'r') as json_file:
        data = json.load(json_file)
    sensers = data["users"][str(user_id)]["sensers"]
    if email_to_remove in sensers:
        sensers.remove(email_to_remove)
    with open('data.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)


async def send_email(receiver, sender, password, subject, body, user_id, chat_id):
    service = None
    smtp_server = ''
    smtp_port = 587

    if '@gmail.com' in sender:
        service = 'gmail'
        smtp_server = 'smtp.gmail.com'
    elif '@outlook.com' in sender or '@hotmail.com' in sender or '@live.com' in sender:
        service = 'hotmail'
        smtp_server = 'smtp-mail.outlook.com'
    elif '@mail.ru' in sender:
        service = 'mail'
        smtp_server = 'smtp.mail.ru'
    elif '@rambler.ru' in sender:
        service = 'rambler'
        smtp_server = 'smtp.rambler.ru'

    if service is None:
        await remove_email(user_id, f'{sender}:{password}')
        await bot.send_message(chat_id, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–æ—á—Ç–∞: {sender}")
        return

    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = receiver
    msg.attach(MIMEText(body))

    try:
        await aiosmtplib.send(
            msg,
            hostname=smtp_server,
            port=smtp_port,
            username=sender,
            password=password,
            start_tls=True
        )
    except aiosmtplib.SMTPException:
        # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
        await remove_email(user_id, f'{sender}:{password}')
        return  



subjects = [
    '–°–ü–ê–ú –ò –†–ï–ö–õ–ê–ú–ê',
    '–î–û–ö–°–ò–ù–ì',
    '–¢–†–û–õ–ò–ù–ì',
    '–ü–†–û–î–ê–ñ–ê –¶–ü',
    '–£–ì–ù–ï–¢–ê–ù–ò–ï –†–ê–°–´/–í–ï–†–´',
    '–†–ê–°–ü–†–û–°–¢–†–ê–ù–Ø–ï–¢ –†–ê–°–ß–õ–ï–ù–ï–ù–ö–£/–ñ–ò–í–û–î–ï–†–ö–£',
    '–ü–û–¢–ê–õ–ö–ò–í–ê–ù–ò–ï –ö –°–ê–ú–û–£–ë–ò–ô–°–¢–í–£',
    '–ü–û–¢–ê–õ–ö–ò–í–ê–ù–ò–ï –ö –¢–ï–†–û–†–ò–ó–ú–£',
    '–£–ì–†–û–ó–´ –°–í–ê–¢–ê',
    '–°–ù–û–° –í–ò–†–¢ –ù–û–ú–ï–†–ê',
    '–°–ù–û–° –ü–†–ï–ú–ö–ò'
]

if __name__ == '__main__':
    sent_messages = 0
    failed_messages = 0

    async def main_loop():
        while True:
            try:
                await bot.polling(non_stop=True)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)

    asyncio.run(main_loop())